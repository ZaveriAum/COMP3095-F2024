#----------------------------------------------------------
# 1. docker-compose -p microservice-comp3095-ecommerce -f docker-compose.yml up -d
#  - This command will start containers in detached mode without rebuilding the images (if they exist)
# 2. docker-compose -p microservice-comp3095-ecommerce -f docker-compose.yml up -d --build
#  - This command forces the rebuild of images, even if they already exist, before starting the containers.
#----------------------------------------------------------

version: '3.9'

services:

  inventory-service:
    image: inventory-service
    ports:
      - "8083:8083"
    build:
      context: ./inventory-service # The directory where the dockerfile resides
      dockerfile: ./Dockerfile # Specify the dockerfile for use to build image
    container_name: inventory-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5434/inventory-service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-inventory
    networks:
      - spring

  postgres-inventory:
    image: postgres
    ports:
      - "5434:5432"
    container_name: postgres-inventory
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    #      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/Lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin-inventory:
    image: dpage/pgadmin4
    ports:
      - "8889:89"
    container_name: pgadmin-inventory
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    depends_on:
      - postgres-inventory
    networks:
      - spring

  order-service:
    image: order-service
    ports:
      - "8082:8082"
    build:
      context: ./order-service # The directory where the dockerfile resides
      dockerfile: ./Dockerfile # Specify the dockerfile for use to build image
    container_name: order-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5433/order-service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-order
    networks:
      - spring

  postgres-order:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-order
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/order:/var/Lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin-order:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin-order
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    depends_on:
      - postgres-order
    networks:
      - spring

  product-service:
    image: product-service
    ports:
      - "8084:8084"
    build:
      context: ./product-service # The directory where the dockerfile resides
      dockerfile: ./Dockerfile # Specify the dockerfile for use to build image
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb-product
    networks:
      - spring

  mongodb-product:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    container_name: mongodb-product
#    restart: unless-stopped
#    command: mongo -auth
    networks:
      - spring

  mongo-express-product:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express-product
    depends_on:
      - mongodb-product
    networks:
      - spring

volumes:
  mongo-db:
    driver: local

networks:
  spring:
    driver: bridge